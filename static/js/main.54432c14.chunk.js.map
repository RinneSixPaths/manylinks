{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["TextArea","Input","App","useState","links","setLinks","loading","setLoading","makeLinksShort","useCallback","a","linksToShort","split","shortenedLinks","makeShortLink","link","Promise","resolve","setTimeout","fetch","encodeURIComponent","then","res","text","shortLink","i","length","shortenedLink","push","join","className","style","height","width","value","onChange","e","target","type","size","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kSAKQA,G,MAAaC,IAAbD,UAuDOE,MArDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,KAIPC,EAAiBC,sBAAW,sBAAC,sCAAAC,EAAA,sDACjCH,GAAW,GAELI,EAAeP,EAAMQ,MAAM,MAE3BC,EAAiB,GAEjBC,EAAgB,SAAAC,GAClB,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACPC,MAAM,0BAAD,OAA2BC,mBAAmBL,KAC9CM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFP,EAAQO,QAEjB,SAKEC,EAAI,EApBgB,YAoBbA,EAAId,EAAae,QApBJ,wBAqBnBX,EAAOJ,EAAac,GArBD,SAsBGX,EAAcC,GAtBjB,OAsBnBY,EAtBmB,OAwBzBd,EAAee,KAAKD,GAxBK,QAoBYF,IApBZ,uBA6BjCpB,EAASQ,EAAegB,KAAK,OAC7BtB,GAAW,GA9BsB,4CA+BhC,CAACH,IAEJ,OACE,yBAAK0B,UAAU,OACb,4BAAQA,UAAU,cAChB,oJAGA,uPAIF,kBAAC9B,EAAD,CAAU+B,MAAO,CAAEC,OAAQ,OAAQC,MAAO,QAAUC,MAAO5B,EAAU,sDAAgBF,EAAO+B,SAAU,SAAAC,GAAC,OAAI/B,EAAS+B,EAAEC,OAAOH,UAC7H,kBAAC,IAAD,CAAQI,KAAK,UAAUC,KAAK,QAAQjC,QAASA,EAASkC,QAAShC,EAAgBuB,MAAO,CAAEE,MAAO,SAA/F,iGC3CcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.54432c14.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport './App.css';\nimport { Input, Button } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst { TextArea } = Input;\n\nfunction App() {\n  const [links, setLinks] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const makeLinksShort = useCallback(async () => {\n    setLoading(true);\n\n    const linksToShort = links.split('\\n');\n\n    const shortenedLinks = [];\n\n    const makeShortLink = link => {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                fetch(`https://clck.ru/--?url=${encodeURIComponent(link)}`)\n                    .then(res => res.text())\n                    .then(shortLink => {\n                        resolve(shortLink);\n                    });\n            }, 200);\n        });\n    };\n\n    // (async () => {\n        for (let i = 0; i < linksToShort.length; i++) {\n            const link = linksToShort[i];\n            const shortenedLink = await makeShortLink(link);\n\n            shortenedLinks.push(shortenedLink);\n        }\n    // })();\n\n    // window.shortenedLinks = shortenedLinks;\n    setLinks(shortenedLinks.join('\\n'));\n    setLoading(false);\n  }, [links]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Вставьте ссылки в поле\n        </p>\n        <p>\n          P.S. Каждая ссылка должна быть с новой строки\n        </p>\n      </header>\n      <TextArea style={{ height: '70vh', width: '90vw' }} value={loading ? 'Загрузка...' : links} onChange={e => setLinks(e.target.value)}/>\n      <Button type=\"primary\" size=\"large\" loading={loading} onClick={makeLinksShort} style={{ width: '90vw' }}>Укоротить ссылки</Button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}